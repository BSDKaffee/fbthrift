// @generated by Thrift for thrift/compiler/test/fixtures/params/src/module.thrift
// This file is probably not the place you want to edit!

//! Thrift error definitions for `module`.

/// Error definitions for `NestedContainers`.
pub mod nested_containers {

    pub type MapListError = ::fbthrift::NonthrowingFunctionError;

    impl ::fbthrift::help::StreamExn for crate::services::nested_containers::MapListExn {
        type Success = ();
        type Return = ();
        type Error = MapListError;

        fn map_stream(res: ::std::result::Result<Self::Success, Self>) -> ::std::result::Result<Self::Return, Self::Error> {
            match res {
                ::std::result::Result::Ok(success) => ::std::result::Result::Ok(success),
                ::std::result::Result::Err(exn) => ::std::result::Result::Err(::std::convert::From::from(exn)),
            }
        }
    }

    impl ::std::convert::From<crate::services::nested_containers::MapListExn> for MapListError {
        fn from(e: crate::services::nested_containers::MapListExn) -> Self {
            match e {
                crate::services::nested_containers::MapListExn::ApplicationException(aexn) =>
                    MapListError::ApplicationException(aexn),
            }
        }
    }

    pub type MapSetError = ::fbthrift::NonthrowingFunctionError;

    impl ::fbthrift::help::StreamExn for crate::services::nested_containers::MapSetExn {
        type Success = ();
        type Return = ();
        type Error = MapSetError;

        fn map_stream(res: ::std::result::Result<Self::Success, Self>) -> ::std::result::Result<Self::Return, Self::Error> {
            match res {
                ::std::result::Result::Ok(success) => ::std::result::Result::Ok(success),
                ::std::result::Result::Err(exn) => ::std::result::Result::Err(::std::convert::From::from(exn)),
            }
        }
    }

    impl ::std::convert::From<crate::services::nested_containers::MapSetExn> for MapSetError {
        fn from(e: crate::services::nested_containers::MapSetExn) -> Self {
            match e {
                crate::services::nested_containers::MapSetExn::ApplicationException(aexn) =>
                    MapSetError::ApplicationException(aexn),
            }
        }
    }

    pub type ListMapError = ::fbthrift::NonthrowingFunctionError;

    impl ::fbthrift::help::StreamExn for crate::services::nested_containers::ListMapExn {
        type Success = ();
        type Return = ();
        type Error = ListMapError;

        fn map_stream(res: ::std::result::Result<Self::Success, Self>) -> ::std::result::Result<Self::Return, Self::Error> {
            match res {
                ::std::result::Result::Ok(success) => ::std::result::Result::Ok(success),
                ::std::result::Result::Err(exn) => ::std::result::Result::Err(::std::convert::From::from(exn)),
            }
        }
    }

    impl ::std::convert::From<crate::services::nested_containers::ListMapExn> for ListMapError {
        fn from(e: crate::services::nested_containers::ListMapExn) -> Self {
            match e {
                crate::services::nested_containers::ListMapExn::ApplicationException(aexn) =>
                    ListMapError::ApplicationException(aexn),
            }
        }
    }

    pub type ListSetError = ::fbthrift::NonthrowingFunctionError;

    impl ::fbthrift::help::StreamExn for crate::services::nested_containers::ListSetExn {
        type Success = ();
        type Return = ();
        type Error = ListSetError;

        fn map_stream(res: ::std::result::Result<Self::Success, Self>) -> ::std::result::Result<Self::Return, Self::Error> {
            match res {
                ::std::result::Result::Ok(success) => ::std::result::Result::Ok(success),
                ::std::result::Result::Err(exn) => ::std::result::Result::Err(::std::convert::From::from(exn)),
            }
        }
    }

    impl ::std::convert::From<crate::services::nested_containers::ListSetExn> for ListSetError {
        fn from(e: crate::services::nested_containers::ListSetExn) -> Self {
            match e {
                crate::services::nested_containers::ListSetExn::ApplicationException(aexn) =>
                    ListSetError::ApplicationException(aexn),
            }
        }
    }

    pub type TurtlesError = ::fbthrift::NonthrowingFunctionError;

    impl ::fbthrift::help::StreamExn for crate::services::nested_containers::TurtlesExn {
        type Success = ();
        type Return = ();
        type Error = TurtlesError;

        fn map_stream(res: ::std::result::Result<Self::Success, Self>) -> ::std::result::Result<Self::Return, Self::Error> {
            match res {
                ::std::result::Result::Ok(success) => ::std::result::Result::Ok(success),
                ::std::result::Result::Err(exn) => ::std::result::Result::Err(::std::convert::From::from(exn)),
            }
        }
    }

    impl ::std::convert::From<crate::services::nested_containers::TurtlesExn> for TurtlesError {
        fn from(e: crate::services::nested_containers::TurtlesExn) -> Self {
            match e {
                crate::services::nested_containers::TurtlesExn::ApplicationException(aexn) =>
                    TurtlesError::ApplicationException(aexn),
            }
        }
    }

}

