// @generated by Thrift for thrift/compiler/test/fixtures/inheritance/src/module.thrift
// This file is probably not the place you want to edit!

#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals, unused_crate_dependencies)]

pub use ::::mock::MyRoot;
pub use ::::mock::MyNode;
pub use ::::mock::MyLeaf;

pub fn new<'mock, Client>() -> Client::Mock<'mock>
where
    Client: ?::std::marker::Sized + DynClient,
{
    Client::mock()
}

pub trait DynClient {
    type Mock<'mock>;
    fn mock<'mock>() -> Self::Mock<'mock>;
}

impl crate::DynClient for dyn ::::MyRoot {
    type Mock<'mock> = ::::mock::MyRoot::<'mock>;
    fn mock<'mock>() -> Self::Mock<'mock> {
        <dyn ::::MyRoot>::mock()
    }
}
impl crate::DynClient for dyn ::::MyNode {
    type Mock<'mock> = ::::mock::MyNode::<'mock>;
    fn mock<'mock>() -> Self::Mock<'mock> {
        <dyn ::::MyNode>::mock()
    }
}
impl crate::DynClient for dyn ::::MyLeaf {
    type Mock<'mock> = ::::mock::MyLeaf::<'mock>;
    fn mock<'mock>() -> Self::Mock<'mock> {
        <dyn ::::MyLeaf>::mock()
    }
}
