// @generated by Thrift for thrift/compiler/test/fixtures/inheritance/src/module.thrift
// This file is probably not the place you want to edit!

//! Thrift error definitions for `module`.

/// Error definitions for `MyRoot`.
pub mod my_root {

    pub type DoRootError = ::fbthrift::NonthrowingFunctionError;

    impl ::fbthrift::help::StreamExn for crate::services::my_root::DoRootExn {
        type Success = ();
        type Return = ();
        type Error = DoRootError;

        fn map_stream(res: ::std::result::Result<Self::Success, Self>) -> ::std::result::Result<Self::Return, Self::Error> {
            match res {
                ::std::result::Result::Ok(success) => ::std::result::Result::Ok(success),
                ::std::result::Result::Err(exn) => ::std::result::Result::Err(::std::convert::From::from(exn)),
            }
        }
    }

    impl ::std::convert::From<crate::services::my_root::DoRootExn> for DoRootError {
        fn from(e: crate::services::my_root::DoRootExn) -> Self {
            match e {
                crate::services::my_root::DoRootExn::ApplicationException(aexn) =>
                    DoRootError::ApplicationException(aexn),
            }
        }
    }

}

/// Error definitions for `MyNode`.
pub mod my_node {

    pub type DoMidError = ::fbthrift::NonthrowingFunctionError;

    impl ::fbthrift::help::StreamExn for crate::services::my_node::DoMidExn {
        type Success = ();
        type Return = ();
        type Error = DoMidError;

        fn map_stream(res: ::std::result::Result<Self::Success, Self>) -> ::std::result::Result<Self::Return, Self::Error> {
            match res {
                ::std::result::Result::Ok(success) => ::std::result::Result::Ok(success),
                ::std::result::Result::Err(exn) => ::std::result::Result::Err(::std::convert::From::from(exn)),
            }
        }
    }

    impl ::std::convert::From<crate::services::my_node::DoMidExn> for DoMidError {
        fn from(e: crate::services::my_node::DoMidExn) -> Self {
            match e {
                crate::services::my_node::DoMidExn::ApplicationException(aexn) =>
                    DoMidError::ApplicationException(aexn),
            }
        }
    }

}

/// Error definitions for `MyLeaf`.
pub mod my_leaf {

    pub type DoLeafError = ::fbthrift::NonthrowingFunctionError;

    impl ::fbthrift::help::StreamExn for crate::services::my_leaf::DoLeafExn {
        type Success = ();
        type Return = ();
        type Error = DoLeafError;

        fn map_stream(res: ::std::result::Result<Self::Success, Self>) -> ::std::result::Result<Self::Return, Self::Error> {
            match res {
                ::std::result::Result::Ok(success) => ::std::result::Result::Ok(success),
                ::std::result::Result::Err(exn) => ::std::result::Result::Err(::std::convert::From::from(exn)),
            }
        }
    }

    impl ::std::convert::From<crate::services::my_leaf::DoLeafExn> for DoLeafError {
        fn from(e: crate::services::my_leaf::DoLeafExn) -> Self {
            match e {
                crate::services::my_leaf::DoLeafExn::ApplicationException(aexn) =>
                    DoLeafError::ApplicationException(aexn),
            }
        }
    }

}

