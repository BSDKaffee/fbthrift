// @generated by Thrift for thrift/compiler/test/fixtures/adapter/src/module.thrift
// This file is probably not the place you want to edit!

//! Thrift error definitions for `module`.

/// Error definitions for `Service`.
pub mod service {

    pub type FuncError = ::fbthrift::NonthrowingFunctionError;

    impl ::std::convert::From<crate::services::service::FuncExn> for FuncError {
        fn from(e: crate::services::service::FuncExn) -> Self {
            match e {
                crate::services::service::FuncExn::ApplicationException(aexn) =>
                    FuncError::ApplicationException(aexn),
            }
        }
    }

    #[doc(hidden)]
    pub enum FuncReader {}

}

/// Error definitions for `AdapterService`.
pub mod adapter_service {

    pub type CountError = ::fbthrift::NonthrowingFunctionError;

    impl ::std::convert::From<crate::services::adapter_service::CountExn> for CountError {
        fn from(e: crate::services::adapter_service::CountExn) -> Self {
            match e {
                crate::services::adapter_service::CountExn::ApplicationException(aexn) =>
                    CountError::ApplicationException(aexn),
            }
        }
    }

    #[doc(hidden)]
    pub enum CountReader {}

    pub type AdaptedTypesError = ::fbthrift::NonthrowingFunctionError;

    impl ::std::convert::From<crate::services::adapter_service::AdaptedTypesExn> for AdaptedTypesError {
        fn from(e: crate::services::adapter_service::AdaptedTypesExn) -> Self {
            match e {
                crate::services::adapter_service::AdaptedTypesExn::ApplicationException(aexn) =>
                    AdaptedTypesError::ApplicationException(aexn),
            }
        }
    }

    #[doc(hidden)]
    pub enum AdaptedTypesReader {}

}

