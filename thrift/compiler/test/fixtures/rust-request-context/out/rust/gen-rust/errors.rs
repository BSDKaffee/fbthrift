// @generated by Thrift for thrift/compiler/test/fixtures/rust-request-context/src/module.thrift
// This file is probably not the place you want to edit!

//! Thrift error definitions for `module`.

/// Error definitions for `MyInteraction`.
pub mod my_interaction {

    pub type PingError = ::fbthrift::NonthrowingFunctionError;

    impl ::fbthrift::help::StreamExn for crate::services::my_interaction::PingExn {
        type Success = ();
        type Return = ();
        type Error = PingError;

        fn map_stream(res: ::std::result::Result<Self::Success, Self>) -> ::std::result::Result<Self::Return, Self::Error> {
            match res {
                ::std::result::Result::Ok(success) => ::std::result::Result::Ok(success),
                ::std::result::Result::Err(exn) => ::std::result::Result::Err(::std::convert::From::from(exn)),
            }
        }
    }

    impl ::std::convert::From<crate::services::my_interaction::PingExn> for PingError {
        fn from(e: crate::services::my_interaction::PingExn) -> Self {
            match e {
                crate::services::my_interaction::PingExn::ApplicationException(aexn) =>
                    PingError::ApplicationException(aexn),
            }
        }
    }

}

/// Error definitions for `MyService`.
pub mod my_service {

    pub type PingError = ::fbthrift::NonthrowingFunctionError;

    impl ::fbthrift::help::StreamExn for crate::services::my_service::PingExn {
        type Success = ();
        type Return = ();
        type Error = PingError;

        fn map_stream(res: ::std::result::Result<Self::Success, Self>) -> ::std::result::Result<Self::Return, Self::Error> {
            match res {
                ::std::result::Result::Ok(success) => ::std::result::Result::Ok(success),
                ::std::result::Result::Err(exn) => ::std::result::Result::Err(::std::convert::From::from(exn)),
            }
        }
    }

    impl ::std::convert::From<crate::services::my_service::PingExn> for PingError {
        fn from(e: crate::services::my_service::PingExn) -> Self {
            match e {
                crate::services::my_service::PingExn::ApplicationException(aexn) =>
                    PingError::ApplicationException(aexn),
            }
        }
    }

    pub type GetRandomDataError = ::fbthrift::NonthrowingFunctionError;

    impl ::fbthrift::help::StreamExn for crate::services::my_service::GetRandomDataExn {
        type Success = ::std::string::String;
        type Return = ::std::string::String;
        type Error = GetRandomDataError;

        fn map_stream(res: ::std::result::Result<Self::Success, Self>) -> ::std::result::Result<Self::Return, Self::Error> {
            match res {
                ::std::result::Result::Ok(success) => ::std::result::Result::Ok(success),
                ::std::result::Result::Err(exn) => ::std::result::Result::Err(::std::convert::From::from(exn)),
            }
        }
    }

    impl ::std::convert::From<crate::services::my_service::GetRandomDataExn> for GetRandomDataError {
        fn from(e: crate::services::my_service::GetRandomDataExn) -> Self {
            match e {
                crate::services::my_service::GetRandomDataExn::ApplicationException(aexn) =>
                    GetRandomDataError::ApplicationException(aexn),
            }
        }
    }

    pub type HasDataByIdError = ::fbthrift::NonthrowingFunctionError;

    impl ::fbthrift::help::StreamExn for crate::services::my_service::HasDataByIdExn {
        type Success = ::std::primitive::bool;
        type Return = ::std::primitive::bool;
        type Error = HasDataByIdError;

        fn map_stream(res: ::std::result::Result<Self::Success, Self>) -> ::std::result::Result<Self::Return, Self::Error> {
            match res {
                ::std::result::Result::Ok(success) => ::std::result::Result::Ok(success),
                ::std::result::Result::Err(exn) => ::std::result::Result::Err(::std::convert::From::from(exn)),
            }
        }
    }

    impl ::std::convert::From<crate::services::my_service::HasDataByIdExn> for HasDataByIdError {
        fn from(e: crate::services::my_service::HasDataByIdExn) -> Self {
            match e {
                crate::services::my_service::HasDataByIdExn::ApplicationException(aexn) =>
                    HasDataByIdError::ApplicationException(aexn),
            }
        }
    }

    pub type GetDataByIdError = ::fbthrift::NonthrowingFunctionError;

    impl ::fbthrift::help::StreamExn for crate::services::my_service::GetDataByIdExn {
        type Success = ::std::string::String;
        type Return = ::std::string::String;
        type Error = GetDataByIdError;

        fn map_stream(res: ::std::result::Result<Self::Success, Self>) -> ::std::result::Result<Self::Return, Self::Error> {
            match res {
                ::std::result::Result::Ok(success) => ::std::result::Result::Ok(success),
                ::std::result::Result::Err(exn) => ::std::result::Result::Err(::std::convert::From::from(exn)),
            }
        }
    }

    impl ::std::convert::From<crate::services::my_service::GetDataByIdExn> for GetDataByIdError {
        fn from(e: crate::services::my_service::GetDataByIdExn) -> Self {
            match e {
                crate::services::my_service::GetDataByIdExn::ApplicationException(aexn) =>
                    GetDataByIdError::ApplicationException(aexn),
            }
        }
    }

    pub type PutDataByIdError = ::fbthrift::NonthrowingFunctionError;

    impl ::fbthrift::help::StreamExn for crate::services::my_service::PutDataByIdExn {
        type Success = ();
        type Return = ();
        type Error = PutDataByIdError;

        fn map_stream(res: ::std::result::Result<Self::Success, Self>) -> ::std::result::Result<Self::Return, Self::Error> {
            match res {
                ::std::result::Result::Ok(success) => ::std::result::Result::Ok(success),
                ::std::result::Result::Err(exn) => ::std::result::Result::Err(::std::convert::From::from(exn)),
            }
        }
    }

    impl ::std::convert::From<crate::services::my_service::PutDataByIdExn> for PutDataByIdError {
        fn from(e: crate::services::my_service::PutDataByIdExn) -> Self {
            match e {
                crate::services::my_service::PutDataByIdExn::ApplicationException(aexn) =>
                    PutDataByIdError::ApplicationException(aexn),
            }
        }
    }

    pub type LobDataByIdError = ::fbthrift::NonthrowingFunctionError;

    impl ::fbthrift::help::StreamExn for crate::services::my_service::LobDataByIdExn {
        type Success = ();
        type Return = ();
        type Error = LobDataByIdError;

        fn map_stream(res: ::std::result::Result<Self::Success, Self>) -> ::std::result::Result<Self::Return, Self::Error> {
            match res {
                ::std::result::Result::Ok(success) => ::std::result::Result::Ok(success),
                ::std::result::Result::Err(exn) => ::std::result::Result::Err(::std::convert::From::from(exn)),
            }
        }
    }

    impl ::std::convert::From<crate::services::my_service::LobDataByIdExn> for LobDataByIdError {
        fn from(e: crate::services::my_service::LobDataByIdExn) -> Self {
            match e {
                crate::services::my_service::LobDataByIdExn::ApplicationException(aexn) =>
                    LobDataByIdError::ApplicationException(aexn),
            }
        }
    }

    pub type StreamByIdError = ::fbthrift::NonthrowingFunctionError;

    impl ::fbthrift::help::StreamExn for crate::services::my_service::StreamByIdExn {
        type Success =     ::futures::stream::BoxStream<'static, ::std::result::Result<crate::types::MyStruct, crate::services::my_service::StreamByIdStreamExn>>
;
        type Return = ::futures::stream::BoxStream<'static, ::std::result::Result<crate::types::MyStruct, crate::errors::my_service::StreamByIdStreamError>>;
        type Error = StreamByIdError;

        fn map_stream(res: ::std::result::Result<Self::Success, Self>) -> ::std::result::Result<Self::Return, Self::Error> {
            match res {
                ::std::result::Result::Ok(success) => ::std::result::Result::Ok({
                    let stream = success;
                    ::futures::StreamExt::boxed(::futures::StreamExt::map(stream, |res| res.map_err(::std::convert::From::from)))
                }),
                ::std::result::Result::Err(exn) => ::std::result::Result::Err(::std::convert::From::from(exn)),
            }
        }
    }

    impl ::std::convert::From<crate::services::my_service::StreamByIdExn> for StreamByIdError {
        fn from(e: crate::services::my_service::StreamByIdExn) -> Self {
            match e {
                crate::services::my_service::StreamByIdExn::ApplicationException(aexn) =>
                    StreamByIdError::ApplicationException(aexn),
            }
        }
    }

    impl ::std::convert::From<crate::services::my_service::StreamByIdResponseExn> for StreamByIdError {
        fn from(e: crate::services::my_service::StreamByIdResponseExn) -> Self {
            match e {
                crate::services::my_service::StreamByIdResponseExn::ApplicationException(aexn) =>
                    StreamByIdError::ApplicationException(aexn),
            }
        }
    }

    pub type StreamByIdStreamError = ::fbthrift::NonthrowingFunctionError;

    impl ::std::convert::From<crate::services::my_service::StreamByIdStreamExn> for StreamByIdStreamError {
        fn from(e: crate::services::my_service::StreamByIdStreamExn) -> Self {
            match e {
                crate::services::my_service::StreamByIdStreamExn::ApplicationException(aexn) =>
                    StreamByIdStreamError::ApplicationException(aexn),
            }
        }
    }

    pub type StreamByIdWithExceptionError = ::fbthrift::NonthrowingFunctionError;

    impl ::fbthrift::help::StreamExn for crate::services::my_service::StreamByIdWithExceptionExn {
        type Success =     ::futures::stream::BoxStream<'static, ::std::result::Result<crate::types::MyStruct, crate::services::my_service::StreamByIdWithExceptionStreamExn>>
;
        type Return = ::futures::stream::BoxStream<'static, ::std::result::Result<crate::types::MyStruct, crate::errors::my_service::StreamByIdWithExceptionStreamError>>;
        type Error = StreamByIdWithExceptionError;

        fn map_stream(res: ::std::result::Result<Self::Success, Self>) -> ::std::result::Result<Self::Return, Self::Error> {
            match res {
                ::std::result::Result::Ok(success) => ::std::result::Result::Ok({
                    let stream = success;
                    ::futures::StreamExt::boxed(::futures::StreamExt::map(stream, |res| res.map_err(::std::convert::From::from)))
                }),
                ::std::result::Result::Err(exn) => ::std::result::Result::Err(::std::convert::From::from(exn)),
            }
        }
    }

    impl ::std::convert::From<crate::services::my_service::StreamByIdWithExceptionExn> for StreamByIdWithExceptionError {
        fn from(e: crate::services::my_service::StreamByIdWithExceptionExn) -> Self {
            match e {
                crate::services::my_service::StreamByIdWithExceptionExn::ApplicationException(aexn) =>
                    StreamByIdWithExceptionError::ApplicationException(aexn),
            }
        }
    }

    impl ::std::convert::From<crate::services::my_service::StreamByIdWithExceptionResponseExn> for StreamByIdWithExceptionError {
        fn from(e: crate::services::my_service::StreamByIdWithExceptionResponseExn) -> Self {
            match e {
                crate::services::my_service::StreamByIdWithExceptionResponseExn::ApplicationException(aexn) =>
                    StreamByIdWithExceptionError::ApplicationException(aexn),
            }
        }
    }

    #[derive(Debug)]
    pub enum StreamByIdWithExceptionStreamError {
        e(crate::types::MyException),
        ApplicationException(::fbthrift::ApplicationException),
        ThriftError(::anyhow::Error),
    }

    /// Human-readable string representation of the Thrift client error.
    ///
    /// By default, this will not print the full cause chain. If you would like to print the underlying error
    /// cause, either use `format!("{:?}", anyhow::Error::from(client_err))` or print this using the
    /// alternate formatter `{:#}` instead of just `{}`.
    impl ::std::fmt::Display for StreamByIdWithExceptionStreamError {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::result::Result<(), ::std::fmt::Error> {
            match self {
                Self::e(inner) => {
                    if f.alternate() {
                        write!(f, "MyService::streamByIdWithException failed with variant `e`: {:#}", inner)?;
                    } else {
                        write!(f, "MyService::streamByIdWithException failed with e(MyException)")?;
                    }
                }
                Self::ApplicationException(inner) => {
                    write!(f, "MyService::streamByIdWithException failed with ApplicationException")?;

                    if f.alternate() {
                      write!(f, ": {:#}", inner)?;
                    }
                }
                Self::ThriftError(inner) => {
                    write!(f, "MyService::streamByIdWithException failed with ThriftError")?;

                    if f.alternate() {
                      write!(f, ": {:#}", inner)?;
                    }
                }
            }

            Ok(())
        }
    }

    impl ::std::error::Error for StreamByIdWithExceptionStreamError {
        fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
            match self {
                Self::e(ref inner) => {
                    Some(inner)
                }
                Self::ApplicationException(ref inner) => {
                    Some(inner)
                }
                Self::ThriftError(ref inner) => {
                    Some(inner.as_ref())
                }
            }
        }
    }

    impl ::std::convert::From<crate::types::MyException> for StreamByIdWithExceptionStreamError {
        fn from(e: crate::types::MyException) -> Self {
            Self::e(e)
        }
    }

    impl ::std::convert::From<::anyhow::Error> for StreamByIdWithExceptionStreamError {
        fn from(err: ::anyhow::Error) -> Self {
            Self::ThriftError(err)
        }
    }

    impl ::std::convert::From<::fbthrift::ApplicationException> for StreamByIdWithExceptionStreamError {
        fn from(ae: ::fbthrift::ApplicationException) -> Self {
            Self::ApplicationException(ae)
        }
    }

    impl ::std::convert::From<crate::services::my_service::StreamByIdWithExceptionStreamExn> for StreamByIdWithExceptionStreamError {
        fn from(e: crate::services::my_service::StreamByIdWithExceptionStreamExn) -> Self {
            match e {
                crate::services::my_service::StreamByIdWithExceptionStreamExn::ApplicationException(aexn) =>
                    StreamByIdWithExceptionStreamError::ApplicationException(aexn),
                crate::services::my_service::StreamByIdWithExceptionStreamExn::e(exn) =>
                    StreamByIdWithExceptionStreamError::e(exn),
            }
        }
    }

    pub type StreamByIdWithResponseError = ::fbthrift::NonthrowingFunctionError;

    impl ::fbthrift::help::StreamExn for crate::services::my_service::StreamByIdWithResponseExn {
        type Success = (
    crate::types::MyDataItem,
    ::futures::stream::BoxStream<'static, ::std::result::Result<crate::types::MyStruct, crate::services::my_service::StreamByIdWithResponseStreamExn>>
)
;
        type Return = (crate::types::MyDataItem, ::futures::stream::BoxStream<'static, ::std::result::Result<crate::types::MyStruct, crate::errors::my_service::StreamByIdWithResponseStreamError>>);
        type Error = StreamByIdWithResponseError;

        fn map_stream(res: ::std::result::Result<Self::Success, Self>) -> ::std::result::Result<Self::Return, Self::Error> {
            match res {
                ::std::result::Result::Ok(success) => ::std::result::Result::Ok({
                    let (resp, stream) = success;
                    (resp, ::futures::StreamExt::boxed(::futures::StreamExt::map(stream, |res| res.map_err(::std::convert::From::from))))
                }),
                ::std::result::Result::Err(exn) => ::std::result::Result::Err(::std::convert::From::from(exn)),
            }
        }
    }

    impl ::std::convert::From<crate::services::my_service::StreamByIdWithResponseExn> for StreamByIdWithResponseError {
        fn from(e: crate::services::my_service::StreamByIdWithResponseExn) -> Self {
            match e {
                crate::services::my_service::StreamByIdWithResponseExn::ApplicationException(aexn) =>
                    StreamByIdWithResponseError::ApplicationException(aexn),
            }
        }
    }

    impl ::std::convert::From<crate::services::my_service::StreamByIdWithResponseResponseExn> for StreamByIdWithResponseError {
        fn from(e: crate::services::my_service::StreamByIdWithResponseResponseExn) -> Self {
            match e {
                crate::services::my_service::StreamByIdWithResponseResponseExn::ApplicationException(aexn) =>
                    StreamByIdWithResponseError::ApplicationException(aexn),
            }
        }
    }

    pub type StreamByIdWithResponseStreamError = ::fbthrift::NonthrowingFunctionError;

    impl ::std::convert::From<crate::services::my_service::StreamByIdWithResponseStreamExn> for StreamByIdWithResponseStreamError {
        fn from(e: crate::services::my_service::StreamByIdWithResponseStreamExn) -> Self {
            match e {
                crate::services::my_service::StreamByIdWithResponseStreamExn::ApplicationException(aexn) =>
                    StreamByIdWithResponseStreamError::ApplicationException(aexn),
            }
        }
    }

    pub type StartPingInteractionError = ::fbthrift::NonthrowingFunctionError;

    impl ::fbthrift::help::StreamExn for crate::services::my_service::StartPingInteractionExn {
        type Success = ();
        type Return = ();
        type Error = StartPingInteractionError;

        fn map_stream(res: ::std::result::Result<Self::Success, Self>) -> ::std::result::Result<Self::Return, Self::Error> {
            match res {
                ::std::result::Result::Ok(success) => ::std::result::Result::Ok(success),
                ::std::result::Result::Err(exn) => ::std::result::Result::Err(::std::convert::From::from(exn)),
            }
        }
    }

    impl ::std::convert::From<crate::services::my_service::StartPingInteractionExn> for StartPingInteractionError {
        fn from(e: crate::services::my_service::StartPingInteractionExn) -> Self {
            match e {
                crate::services::my_service::StartPingInteractionExn::ApplicationException(aexn) =>
                    StartPingInteractionError::ApplicationException(aexn),
            }
        }
    }

}

