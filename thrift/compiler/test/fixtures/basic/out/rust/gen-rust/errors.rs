// @generated by Thrift for thrift/compiler/test/fixtures/basic/src/module.thrift
// This file is probably not the place you want to edit!

//! Thrift error definitions for `module`.

/// Error definitions for `FooService`.
pub mod foo_service {

    pub type SimpleRpcError = ::fbthrift::NonthrowingFunctionError;

    impl ::std::convert::From<crate::services::foo_service::SimpleRpcExn> for SimpleRpcError {
        fn from(e: crate::services::foo_service::SimpleRpcExn) -> Self {
            match e {
                crate::services::foo_service::SimpleRpcExn::ApplicationException(aexn) =>
                    SimpleRpcError::ApplicationException(aexn),
            }
        }
    }

    #[doc(hidden)]
    pub enum SimpleRpcReader {}

}

/// Error definitions for `FB303Service`.
pub mod f_b303_service {

    pub type SimpleRpcError = ::fbthrift::NonthrowingFunctionError;

    impl ::std::convert::From<crate::services::f_b303_service::SimpleRpcExn> for SimpleRpcError {
        fn from(e: crate::services::f_b303_service::SimpleRpcExn) -> Self {
            match e {
                crate::services::f_b303_service::SimpleRpcExn::ApplicationException(aexn) =>
                    SimpleRpcError::ApplicationException(aexn),
            }
        }
    }

    #[doc(hidden)]
    pub enum SimpleRpcReader {}

}

/// Error definitions for `MyService`.
pub mod my_service {

    pub type PingError = ::fbthrift::NonthrowingFunctionError;

    impl ::std::convert::From<crate::services::my_service::PingExn> for PingError {
        fn from(e: crate::services::my_service::PingExn) -> Self {
            match e {
                crate::services::my_service::PingExn::ApplicationException(aexn) =>
                    PingError::ApplicationException(aexn),
            }
        }
    }

    #[doc(hidden)]
    pub enum PingReader {}

    pub type GetRandomDataError = ::fbthrift::NonthrowingFunctionError;

    impl ::std::convert::From<crate::services::my_service::GetRandomDataExn> for GetRandomDataError {
        fn from(e: crate::services::my_service::GetRandomDataExn) -> Self {
            match e {
                crate::services::my_service::GetRandomDataExn::ApplicationException(aexn) =>
                    GetRandomDataError::ApplicationException(aexn),
            }
        }
    }

    #[doc(hidden)]
    pub enum GetRandomDataReader {}

    pub type SinkError = ::fbthrift::NonthrowingFunctionError;

    impl ::std::convert::From<crate::services::my_service::SinkExn> for SinkError {
        fn from(e: crate::services::my_service::SinkExn) -> Self {
            match e {
                crate::services::my_service::SinkExn::ApplicationException(aexn) =>
                    SinkError::ApplicationException(aexn),
            }
        }
    }

    #[doc(hidden)]
    pub enum SinkReader {}

    pub type PutDataByIdError = ::fbthrift::NonthrowingFunctionError;

    impl ::std::convert::From<crate::services::my_service::PutDataByIdExn> for PutDataByIdError {
        fn from(e: crate::services::my_service::PutDataByIdExn) -> Self {
            match e {
                crate::services::my_service::PutDataByIdExn::ApplicationException(aexn) =>
                    PutDataByIdError::ApplicationException(aexn),
            }
        }
    }

    #[doc(hidden)]
    pub enum PutDataByIdReader {}

    pub type HasDataByIdError = ::fbthrift::NonthrowingFunctionError;

    impl ::std::convert::From<crate::services::my_service::HasDataByIdExn> for HasDataByIdError {
        fn from(e: crate::services::my_service::HasDataByIdExn) -> Self {
            match e {
                crate::services::my_service::HasDataByIdExn::ApplicationException(aexn) =>
                    HasDataByIdError::ApplicationException(aexn),
            }
        }
    }

    #[doc(hidden)]
    pub enum HasDataByIdReader {}

    pub type GetDataByIdError = ::fbthrift::NonthrowingFunctionError;

    impl ::std::convert::From<crate::services::my_service::GetDataByIdExn> for GetDataByIdError {
        fn from(e: crate::services::my_service::GetDataByIdExn) -> Self {
            match e {
                crate::services::my_service::GetDataByIdExn::ApplicationException(aexn) =>
                    GetDataByIdError::ApplicationException(aexn),
            }
        }
    }

    #[doc(hidden)]
    pub enum GetDataByIdReader {}

    pub type DeleteDataByIdError = ::fbthrift::NonthrowingFunctionError;

    impl ::std::convert::From<crate::services::my_service::DeleteDataByIdExn> for DeleteDataByIdError {
        fn from(e: crate::services::my_service::DeleteDataByIdExn) -> Self {
            match e {
                crate::services::my_service::DeleteDataByIdExn::ApplicationException(aexn) =>
                    DeleteDataByIdError::ApplicationException(aexn),
            }
        }
    }

    #[doc(hidden)]
    pub enum DeleteDataByIdReader {}

    pub type LobDataByIdError = ::fbthrift::NonthrowingFunctionError;

    impl ::std::convert::From<crate::services::my_service::LobDataByIdExn> for LobDataByIdError {
        fn from(e: crate::services::my_service::LobDataByIdExn) -> Self {
            match e {
                crate::services::my_service::LobDataByIdExn::ApplicationException(aexn) =>
                    LobDataByIdError::ApplicationException(aexn),
            }
        }
    }

    #[doc(hidden)]
    pub enum LobDataByIdReader {}

    pub type InvalidReturnForHackError = ::fbthrift::NonthrowingFunctionError;

    impl ::std::convert::From<crate::services::my_service::InvalidReturnForHackExn> for InvalidReturnForHackError {
        fn from(e: crate::services::my_service::InvalidReturnForHackExn) -> Self {
            match e {
                crate::services::my_service::InvalidReturnForHackExn::ApplicationException(aexn) =>
                    InvalidReturnForHackError::ApplicationException(aexn),
            }
        }
    }

    #[doc(hidden)]
    pub enum InvalidReturnForHackReader {}

    pub type RpcSkippedCodegenError = ::fbthrift::NonthrowingFunctionError;

    impl ::std::convert::From<crate::services::my_service::RpcSkippedCodegenExn> for RpcSkippedCodegenError {
        fn from(e: crate::services::my_service::RpcSkippedCodegenExn) -> Self {
            match e {
                crate::services::my_service::RpcSkippedCodegenExn::ApplicationException(aexn) =>
                    RpcSkippedCodegenError::ApplicationException(aexn),
            }
        }
    }

    #[doc(hidden)]
    pub enum RpcSkippedCodegenReader {}

}

/// Error definitions for `DbMixedStackArguments`.
pub mod db_mixed_stack_arguments {

    pub type GetDataByKey0Error = ::fbthrift::NonthrowingFunctionError;

    impl ::std::convert::From<crate::services::db_mixed_stack_arguments::GetDataByKey0Exn> for GetDataByKey0Error {
        fn from(e: crate::services::db_mixed_stack_arguments::GetDataByKey0Exn) -> Self {
            match e {
                crate::services::db_mixed_stack_arguments::GetDataByKey0Exn::ApplicationException(aexn) =>
                    GetDataByKey0Error::ApplicationException(aexn),
            }
        }
    }

    #[doc(hidden)]
    pub enum GetDataByKey0Reader {}

    pub type GetDataByKey1Error = ::fbthrift::NonthrowingFunctionError;

    impl ::std::convert::From<crate::services::db_mixed_stack_arguments::GetDataByKey1Exn> for GetDataByKey1Error {
        fn from(e: crate::services::db_mixed_stack_arguments::GetDataByKey1Exn) -> Self {
            match e {
                crate::services::db_mixed_stack_arguments::GetDataByKey1Exn::ApplicationException(aexn) =>
                    GetDataByKey1Error::ApplicationException(aexn),
            }
        }
    }

    #[doc(hidden)]
    pub enum GetDataByKey1Reader {}

}

