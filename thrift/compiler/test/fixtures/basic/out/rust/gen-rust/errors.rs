// @generated by Thrift for thrift/compiler/test/fixtures/basic/src/module.thrift
// This file is probably not the place you want to edit!

//! Thrift error definitions for `module`.

/// Error definitions for `FooService`.
pub mod foo_service {

    pub type SimpleRpcError = ::fbthrift::NonthrowingFunctionError;

    impl ::fbthrift::help::StreamExn for crate::services::foo_service::SimpleRpcExn {
        type Success = ();
        type Return = ();
        type Error = SimpleRpcError;

        fn map_stream(res: ::std::result::Result<Self::Success, Self>) -> ::std::result::Result<Self::Return, Self::Error> {
            match res {
                ::std::result::Result::Ok(success) => ::std::result::Result::Ok(success),
                ::std::result::Result::Err(exn) => ::std::result::Result::Err(::std::convert::From::from(exn)),
            }
        }
    }

    impl ::std::convert::From<crate::services::foo_service::SimpleRpcExn> for SimpleRpcError {
        fn from(e: crate::services::foo_service::SimpleRpcExn) -> Self {
            match e {
                crate::services::foo_service::SimpleRpcExn::ApplicationException(aexn) =>
                    SimpleRpcError::ApplicationException(aexn),
            }
        }
    }

}

/// Error definitions for `FB303Service`.
pub mod f_b303_service {

    pub type SimpleRpcError = ::fbthrift::NonthrowingFunctionError;

    impl ::fbthrift::help::StreamExn for crate::services::f_b303_service::SimpleRpcExn {
        type Success = crate::types::ReservedKeyword;
        type Return = crate::types::ReservedKeyword;
        type Error = SimpleRpcError;

        fn map_stream(res: ::std::result::Result<Self::Success, Self>) -> ::std::result::Result<Self::Return, Self::Error> {
            match res {
                ::std::result::Result::Ok(success) => ::std::result::Result::Ok(success),
                ::std::result::Result::Err(exn) => ::std::result::Result::Err(::std::convert::From::from(exn)),
            }
        }
    }

    impl ::std::convert::From<crate::services::f_b303_service::SimpleRpcExn> for SimpleRpcError {
        fn from(e: crate::services::f_b303_service::SimpleRpcExn) -> Self {
            match e {
                crate::services::f_b303_service::SimpleRpcExn::ApplicationException(aexn) =>
                    SimpleRpcError::ApplicationException(aexn),
            }
        }
    }

}

/// Error definitions for `MyService`.
pub mod my_service {

    pub type PingError = ::fbthrift::NonthrowingFunctionError;

    impl ::fbthrift::help::StreamExn for crate::services::my_service::PingExn {
        type Success = ();
        type Return = ();
        type Error = PingError;

        fn map_stream(res: ::std::result::Result<Self::Success, Self>) -> ::std::result::Result<Self::Return, Self::Error> {
            match res {
                ::std::result::Result::Ok(success) => ::std::result::Result::Ok(success),
                ::std::result::Result::Err(exn) => ::std::result::Result::Err(::std::convert::From::from(exn)),
            }
        }
    }

    impl ::std::convert::From<crate::services::my_service::PingExn> for PingError {
        fn from(e: crate::services::my_service::PingExn) -> Self {
            match e {
                crate::services::my_service::PingExn::ApplicationException(aexn) =>
                    PingError::ApplicationException(aexn),
            }
        }
    }

    pub type GetRandomDataError = ::fbthrift::NonthrowingFunctionError;

    impl ::fbthrift::help::StreamExn for crate::services::my_service::GetRandomDataExn {
        type Success = ::std::string::String;
        type Return = ::std::string::String;
        type Error = GetRandomDataError;

        fn map_stream(res: ::std::result::Result<Self::Success, Self>) -> ::std::result::Result<Self::Return, Self::Error> {
            match res {
                ::std::result::Result::Ok(success) => ::std::result::Result::Ok(success),
                ::std::result::Result::Err(exn) => ::std::result::Result::Err(::std::convert::From::from(exn)),
            }
        }
    }

    impl ::std::convert::From<crate::services::my_service::GetRandomDataExn> for GetRandomDataError {
        fn from(e: crate::services::my_service::GetRandomDataExn) -> Self {
            match e {
                crate::services::my_service::GetRandomDataExn::ApplicationException(aexn) =>
                    GetRandomDataError::ApplicationException(aexn),
            }
        }
    }

    pub type SinkError = ::fbthrift::NonthrowingFunctionError;

    impl ::fbthrift::help::StreamExn for crate::services::my_service::SinkExn {
        type Success = ();
        type Return = ();
        type Error = SinkError;

        fn map_stream(res: ::std::result::Result<Self::Success, Self>) -> ::std::result::Result<Self::Return, Self::Error> {
            match res {
                ::std::result::Result::Ok(success) => ::std::result::Result::Ok(success),
                ::std::result::Result::Err(exn) => ::std::result::Result::Err(::std::convert::From::from(exn)),
            }
        }
    }

    impl ::std::convert::From<crate::services::my_service::SinkExn> for SinkError {
        fn from(e: crate::services::my_service::SinkExn) -> Self {
            match e {
                crate::services::my_service::SinkExn::ApplicationException(aexn) =>
                    SinkError::ApplicationException(aexn),
            }
        }
    }

    pub type PutDataByIdError = ::fbthrift::NonthrowingFunctionError;

    impl ::fbthrift::help::StreamExn for crate::services::my_service::PutDataByIdExn {
        type Success = ();
        type Return = ();
        type Error = PutDataByIdError;

        fn map_stream(res: ::std::result::Result<Self::Success, Self>) -> ::std::result::Result<Self::Return, Self::Error> {
            match res {
                ::std::result::Result::Ok(success) => ::std::result::Result::Ok(success),
                ::std::result::Result::Err(exn) => ::std::result::Result::Err(::std::convert::From::from(exn)),
            }
        }
    }

    impl ::std::convert::From<crate::services::my_service::PutDataByIdExn> for PutDataByIdError {
        fn from(e: crate::services::my_service::PutDataByIdExn) -> Self {
            match e {
                crate::services::my_service::PutDataByIdExn::ApplicationException(aexn) =>
                    PutDataByIdError::ApplicationException(aexn),
            }
        }
    }

    pub type HasDataByIdError = ::fbthrift::NonthrowingFunctionError;

    impl ::fbthrift::help::StreamExn for crate::services::my_service::HasDataByIdExn {
        type Success = ::std::primitive::bool;
        type Return = ::std::primitive::bool;
        type Error = HasDataByIdError;

        fn map_stream(res: ::std::result::Result<Self::Success, Self>) -> ::std::result::Result<Self::Return, Self::Error> {
            match res {
                ::std::result::Result::Ok(success) => ::std::result::Result::Ok(success),
                ::std::result::Result::Err(exn) => ::std::result::Result::Err(::std::convert::From::from(exn)),
            }
        }
    }

    impl ::std::convert::From<crate::services::my_service::HasDataByIdExn> for HasDataByIdError {
        fn from(e: crate::services::my_service::HasDataByIdExn) -> Self {
            match e {
                crate::services::my_service::HasDataByIdExn::ApplicationException(aexn) =>
                    HasDataByIdError::ApplicationException(aexn),
            }
        }
    }

    pub type GetDataByIdError = ::fbthrift::NonthrowingFunctionError;

    impl ::fbthrift::help::StreamExn for crate::services::my_service::GetDataByIdExn {
        type Success = ::std::string::String;
        type Return = ::std::string::String;
        type Error = GetDataByIdError;

        fn map_stream(res: ::std::result::Result<Self::Success, Self>) -> ::std::result::Result<Self::Return, Self::Error> {
            match res {
                ::std::result::Result::Ok(success) => ::std::result::Result::Ok(success),
                ::std::result::Result::Err(exn) => ::std::result::Result::Err(::std::convert::From::from(exn)),
            }
        }
    }

    impl ::std::convert::From<crate::services::my_service::GetDataByIdExn> for GetDataByIdError {
        fn from(e: crate::services::my_service::GetDataByIdExn) -> Self {
            match e {
                crate::services::my_service::GetDataByIdExn::ApplicationException(aexn) =>
                    GetDataByIdError::ApplicationException(aexn),
            }
        }
    }

    pub type DeleteDataByIdError = ::fbthrift::NonthrowingFunctionError;

    impl ::fbthrift::help::StreamExn for crate::services::my_service::DeleteDataByIdExn {
        type Success = ();
        type Return = ();
        type Error = DeleteDataByIdError;

        fn map_stream(res: ::std::result::Result<Self::Success, Self>) -> ::std::result::Result<Self::Return, Self::Error> {
            match res {
                ::std::result::Result::Ok(success) => ::std::result::Result::Ok(success),
                ::std::result::Result::Err(exn) => ::std::result::Result::Err(::std::convert::From::from(exn)),
            }
        }
    }

    impl ::std::convert::From<crate::services::my_service::DeleteDataByIdExn> for DeleteDataByIdError {
        fn from(e: crate::services::my_service::DeleteDataByIdExn) -> Self {
            match e {
                crate::services::my_service::DeleteDataByIdExn::ApplicationException(aexn) =>
                    DeleteDataByIdError::ApplicationException(aexn),
            }
        }
    }

    pub type LobDataByIdError = ::fbthrift::NonthrowingFunctionError;

    impl ::fbthrift::help::StreamExn for crate::services::my_service::LobDataByIdExn {
        type Success = ();
        type Return = ();
        type Error = LobDataByIdError;

        fn map_stream(res: ::std::result::Result<Self::Success, Self>) -> ::std::result::Result<Self::Return, Self::Error> {
            match res {
                ::std::result::Result::Ok(success) => ::std::result::Result::Ok(success),
                ::std::result::Result::Err(exn) => ::std::result::Result::Err(::std::convert::From::from(exn)),
            }
        }
    }

    impl ::std::convert::From<crate::services::my_service::LobDataByIdExn> for LobDataByIdError {
        fn from(e: crate::services::my_service::LobDataByIdExn) -> Self {
            match e {
                crate::services::my_service::LobDataByIdExn::ApplicationException(aexn) =>
                    LobDataByIdError::ApplicationException(aexn),
            }
        }
    }

    pub type InvalidReturnForHackError = ::fbthrift::NonthrowingFunctionError;

    impl ::fbthrift::help::StreamExn for crate::services::my_service::InvalidReturnForHackExn {
        type Success = ::std::collections::BTreeSet<::fbthrift::export::OrderedFloat<::std::primitive::f32>>;
        type Return = ::std::collections::BTreeSet<::fbthrift::export::OrderedFloat<::std::primitive::f32>>;
        type Error = InvalidReturnForHackError;

        fn map_stream(res: ::std::result::Result<Self::Success, Self>) -> ::std::result::Result<Self::Return, Self::Error> {
            match res {
                ::std::result::Result::Ok(success) => ::std::result::Result::Ok(success),
                ::std::result::Result::Err(exn) => ::std::result::Result::Err(::std::convert::From::from(exn)),
            }
        }
    }

    impl ::std::convert::From<crate::services::my_service::InvalidReturnForHackExn> for InvalidReturnForHackError {
        fn from(e: crate::services::my_service::InvalidReturnForHackExn) -> Self {
            match e {
                crate::services::my_service::InvalidReturnForHackExn::ApplicationException(aexn) =>
                    InvalidReturnForHackError::ApplicationException(aexn),
            }
        }
    }

    pub type RpcSkippedCodegenError = ::fbthrift::NonthrowingFunctionError;

    impl ::fbthrift::help::StreamExn for crate::services::my_service::RpcSkippedCodegenExn {
        type Success = ();
        type Return = ();
        type Error = RpcSkippedCodegenError;

        fn map_stream(res: ::std::result::Result<Self::Success, Self>) -> ::std::result::Result<Self::Return, Self::Error> {
            match res {
                ::std::result::Result::Ok(success) => ::std::result::Result::Ok(success),
                ::std::result::Result::Err(exn) => ::std::result::Result::Err(::std::convert::From::from(exn)),
            }
        }
    }

    impl ::std::convert::From<crate::services::my_service::RpcSkippedCodegenExn> for RpcSkippedCodegenError {
        fn from(e: crate::services::my_service::RpcSkippedCodegenExn) -> Self {
            match e {
                crate::services::my_service::RpcSkippedCodegenExn::ApplicationException(aexn) =>
                    RpcSkippedCodegenError::ApplicationException(aexn),
            }
        }
    }

}

/// Error definitions for `DbMixedStackArguments`.
pub mod db_mixed_stack_arguments {

    pub type GetDataByKey0Error = ::fbthrift::NonthrowingFunctionError;

    impl ::fbthrift::help::StreamExn for crate::services::db_mixed_stack_arguments::GetDataByKey0Exn {
        type Success = ::std::vec::Vec<::std::primitive::u8>;
        type Return = ::std::vec::Vec<::std::primitive::u8>;
        type Error = GetDataByKey0Error;

        fn map_stream(res: ::std::result::Result<Self::Success, Self>) -> ::std::result::Result<Self::Return, Self::Error> {
            match res {
                ::std::result::Result::Ok(success) => ::std::result::Result::Ok(success),
                ::std::result::Result::Err(exn) => ::std::result::Result::Err(::std::convert::From::from(exn)),
            }
        }
    }

    impl ::std::convert::From<crate::services::db_mixed_stack_arguments::GetDataByKey0Exn> for GetDataByKey0Error {
        fn from(e: crate::services::db_mixed_stack_arguments::GetDataByKey0Exn) -> Self {
            match e {
                crate::services::db_mixed_stack_arguments::GetDataByKey0Exn::ApplicationException(aexn) =>
                    GetDataByKey0Error::ApplicationException(aexn),
            }
        }
    }

    pub type GetDataByKey1Error = ::fbthrift::NonthrowingFunctionError;

    impl ::fbthrift::help::StreamExn for crate::services::db_mixed_stack_arguments::GetDataByKey1Exn {
        type Success = ::std::vec::Vec<::std::primitive::u8>;
        type Return = ::std::vec::Vec<::std::primitive::u8>;
        type Error = GetDataByKey1Error;

        fn map_stream(res: ::std::result::Result<Self::Success, Self>) -> ::std::result::Result<Self::Return, Self::Error> {
            match res {
                ::std::result::Result::Ok(success) => ::std::result::Result::Ok(success),
                ::std::result::Result::Err(exn) => ::std::result::Result::Err(::std::convert::From::from(exn)),
            }
        }
    }

    impl ::std::convert::From<crate::services::db_mixed_stack_arguments::GetDataByKey1Exn> for GetDataByKey1Error {
        fn from(e: crate::services::db_mixed_stack_arguments::GetDataByKey1Exn) -> Self {
            match e {
                crate::services::db_mixed_stack_arguments::GetDataByKey1Exn::ApplicationException(aexn) =>
                    GetDataByKey1Error::ApplicationException(aexn),
            }
        }
    }

}

